- schema: |-
    CREATE PROPERTY GRAPH someGraphType {
      (:Post { foo :: INTEGER UNIQUE }),
      (:Person { bar :: STRING, baz :: STRING }) UNIQUE (bar, baz),
      (:Post)-[:RELATED_TO { qux :: INTEGER UNIQUE }]->(:Post),
      (:Post)-[:AUTHORED_BY { quux :: INTEGER, corge :: STRING }]->(:Person) UNIQUE (quux, corge)
    }

  cases:
    - name: Create simple node UNIQUE
      query: "CREATE (:Post { foo: 1 })"
    - name: Create simple node UNIQUE with duplicate value
      setup: |-
        CREATE (:Post { foo: 2 })
      query: |
        CREATE (:Post { foo: 2 })
      want_err: true
    - name: Create composite node UNIQUE
      query: "CREATE (:Person { bar: 'bar', baz: 'baz' })"
    - name: Create composite node UNIQUE with duplicate values
      setup: |-
        CREATE (:Person { bar: 'bar1', baz: 'baz1' })
      query: |
        CREATE (:Person { bar: 'bar1', baz: 'baz1' })
      want_err: true
    - name: Create simple relationship UNIQUE
      query: |-
        CREATE (p1:Post { foo: 1 }), (p2:Post { foo: 2 }),
               (p1)-[:RELATED_TO { qux: 3 }]->(p2)
    - name: Create simple relationship UNIQUE with duplicate value
      setup: |-
        CREATE (:Post)-[:RELATED_TO { qux: 2 }]->(:Post)
      query: |
        CREATE (:Post)-[:RELATED_TO { qux: 2 }]->(:Post)
      want_err: true
    - name: Create composite relationship UNIQUE
      query: |-
        CREATE (p1:Post { foo: 1 }), (p2:Person { bar: 'bar', baz: 'baz' }),
               (p1)-[:AUTHORED_BY { quux: 2, corge: 'corge' }]->(p2)
    - name: Create composite relationship UNIQUE with duplicate values
      query: |
        CREATE (p1:Post { foo: 1 }), (p2:Person { bar: 'bar1', baz: 'baz1' })
               (p1)-[:AUTHORED_BY { quux: 2, corge: 'corge1' }]->(p2),
               (p1)-[:AUTHORED_BY { quux: 2, corge: 'corge1' }]->(p2)
      want_err: true
