input: |-
  CREATE PROPERTY GRAPH someGraphType {
    (p:Person { name :: STRING, age :: INT8 }),
    (:Person)~[:is_friend { since :: DATE NOT NULL, nickname :: VARCHAR(32) }]~(:Person),
    (:Person)-[:likes { since :: DATE NOT NULL }]->(:Post)
  }
want: |-
  CREATE CONSTRAINT type_person_name FOR (n:Person) REQUIRE n.name IS :: STRING;
  CREATE CONSTRAINT type_person_age FOR (n:Person) REQUIRE n.age IS :: INTEGER;
  CALL apoc.trigger.add("numeric_range_person_age", "UNWIND $createdNodes AS e WITH e WHERE e:Person AND e.age IS NOT NULL AND (e.age < -128 OR e.age > 127) CALL apoc.util.validate(true, 'age must be between -128 and 127', []) RETURN NULL UNION UNWIND keys($assignedNodeProperties) AS prop UNWIND $assignedNodeProperties[prop] AS change WITH change WHERE change.node:Person AND change.key = \"age\" AND change.new IS NOT NULL AND (change.new < -128 OR change.new > 127) CALL apoc.util.validate(true, 'age must be between -128 and 127', []) RETURN NULL", {phase: "before"});
  CALL apoc.trigger.add("edge_endpoint_is_friend_person_person", "UNWIND $createdRelationships AS rel WITH rel WHERE type(rel) = \"is_friend\" AND NOT (startNode(rel):Person AND endNode(rel):Person) CALL apoc.util.validate( true, \"is_friend relationship must be between Person and Person\", [] ) RETURN NULL", {phase: "before"});
  CREATE CONSTRAINT type_is_friend_since FOR ()-[n:is_friend]->() REQUIRE n.since IS :: DATE;
  CREATE CONSTRAINT existence_is_friend_since FOR ()-[n:is_friend]->() REQUIRE n.since IS NOT NULL;
  CREATE CONSTRAINT type_is_friend_nickname FOR ()-[n:is_friend]->() REQUIRE n.nickname IS :: STRING;
  CALL apoc.trigger.add("string_length_is_friend_nickname", "UNWIND $createdRelationships AS e WITH e WHERE e:is_friend AND e.nickname IS NOT NULL AND (size(e.nickname) < 0 OR size(e.nickname) > 32) CALL apoc.util.validate(true, 'nickname must be between 0 and 32 characters', []) RETURN NULL UNION UNWIND keys($assignedRelationshipProperties) AS prop UNWIND $assignedRelationshipProperties[prop] AS change WITH change WHERE change.relationship:is_friend AND change.key = \"nickname\" AND change.new IS NOT NULL AND (size(change.new) < 0 OR size(change.new) > 32) CALL apoc.util.validate(true, 'nickname must be between 0 and 32 characters', []) RETURN NULL", {phase: "before"});
  CALL apoc.trigger.add("edge_endpoint_likes_person_post", "UNWIND $createdRelationships AS rel WITH rel WHERE type(rel) = \"likes\" AND NOT (startNode(rel):Person AND endNode(rel):Post) CALL apoc.util.validate( true, \"likes relationship must be between Person and Post\", [] ) RETURN NULL", {phase: "before"});
  CREATE CONSTRAINT type_likes_since FOR ()-[n:likes]->() REQUIRE n.since IS :: DATE;
  CREATE CONSTRAINT existence_likes_since FOR ()-[n:likes]->() REQUIRE n.since IS NOT NULL;
