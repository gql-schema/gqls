input: |-
  CREATE PROPERTY GRAPH someGraphType {
    (:Post { title :: VARCHAR(255), content :: STRING, tags :: STRING(10, 20) })
  }
want: |-
  CREATE CONSTRAINT type_post_title FOR (n:Post) REQUIRE n.title IS :: STRING;
  CALL apoc.trigger.add("string_length_post_title", "UNWIND $createdNodes AS e WITH e WHERE e:Post AND e.title IS NOT NULL AND (size(e.title) < 0 OR size(e.title) > 255) CALL apoc.util.validate(true, 'title must be between 0 and 255 characters', []) RETURN NULL UNION UNWIND keys($assignedNodeProperties) AS prop UNWIND $assignedNodeProperties[prop] AS change WITH change WHERE change.node:Post AND change.key = \"title\" AND change.new IS NOT NULL AND (size(change.new) < 0 OR size(change.new) > 255) CALL apoc.util.validate(true, 'title must be between 0 and 255 characters', []) RETURN NULL", {phase: "before"});
  CREATE CONSTRAINT type_post_content FOR (n:Post) REQUIRE n.content IS :: STRING;
  CREATE CONSTRAINT type_post_tags FOR (n:Post) REQUIRE n.tags IS :: STRING;
  CALL apoc.trigger.add("string_length_post_tags", "UNWIND $createdNodes AS e WITH e WHERE e:Post AND e.tags IS NOT NULL AND (size(e.tags) < 10 OR size(e.tags) > 20) CALL apoc.util.validate(true, 'tags must be between 10 and 20 characters', []) RETURN NULL UNION UNWIND keys($assignedNodeProperties) AS prop UNWIND $assignedNodeProperties[prop] AS change WITH change WHERE change.node:Post AND change.key = \"tags\" AND change.new IS NOT NULL AND (size(change.new) < 10 OR size(change.new) > 20) CALL apoc.util.validate(true, 'tags must be between 10 and 20 characters', []) RETURN NULL", {phase: "before"});
