input: |-
  CREATE PROPERTY GRAPH someGraphType {
    (:Place { postcode :: CHAR(5) }),
    (:Place)-[:CLOSE_TO { label :: CHAR(10) }]->(:Place)
  }
want: |-
  CREATE CONSTRAINT type_place_postcode FOR (n:Place) REQUIRE n.postcode IS :: STRING;
  CALL apoc.trigger.add("string_length_place_postcode", "UNWIND $createdNodes AS e WITH e WHERE e:Place AND e.postcode IS NOT NULL AND (size(e.postcode) < 5 OR size(e.postcode) > 5) CALL apoc.util.validate(true, 'postcode must be between 5 and 5 characters', []) RETURN NULL UNION UNWIND keys($assignedNodeProperties) AS prop UNWIND $assignedNodeProperties[prop] AS change WITH change WHERE change.node:Place AND change.key = \"postcode\" AND change.new IS NOT NULL AND (size(change.new) < 5 OR size(change.new) > 5) CALL apoc.util.validate(true, 'postcode must be between 5 and 5 characters', []) RETURN NULL", {phase: "before"});
  CALL apoc.trigger.add("edge_endpoint_close_to_place_place", "UNWIND $createdRelationships AS rel WITH rel WHERE type(rel) = \"CLOSE_TO\" AND NOT (startNode(rel):Place AND endNode(rel):Place) CALL apoc.util.validate( true, \"CLOSE_TO relationship must be between Place and Place\", [] ) RETURN NULL", {phase: "before"});
  CREATE CONSTRAINT type_close_to_label FOR ()-[n:CLOSE_TO]->() REQUIRE n.label IS :: STRING;
  CALL apoc.trigger.add("string_length_close_to_label", "UNWIND $createdRelationships AS e WITH e WHERE e:CLOSE_TO AND e.label IS NOT NULL AND (size(e.label) < 10 OR size(e.label) > 10) CALL apoc.util.validate(true, 'label must be between 10 and 10 characters', []) RETURN NULL UNION UNWIND keys($assignedRelationshipProperties) AS prop UNWIND $assignedRelationshipProperties[prop] AS change WITH change WHERE change.relationship:CLOSE_TO AND change.key = \"label\" AND change.new IS NOT NULL AND (size(change.new) < 10 OR size(change.new) > 10) CALL apoc.util.validate(true, 'label must be between 10 and 10 characters', []) RETURN NULL", {phase: "before"});
